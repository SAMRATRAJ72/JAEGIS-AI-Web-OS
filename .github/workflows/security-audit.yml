name: Security Audit

on:
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        npm ci
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit semgrep
        
    - name: Run npm audit
      run: |
        npm audit --audit-level=moderate --json > npm-audit.json || true
        
    - name: Run Python safety check
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Run Bandit security linter
      run: |
        bandit -r mcp_server/ -f json -o bandit-report.json || true
        
    - name: Run Semgrep security analysis
      run: |
        semgrep --config=auto --json --output=semgrep-report.json mcp_server/ || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports-${{ github.sha }}
        path: |
          npm-audit.json
          safety-report.json
          bandit-report.json
          semgrep-report.json
          
    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let summary = '## ðŸ”’ Security Audit Summary\n\n';
          
          // Check npm audit
          try {
            const npmAudit = JSON.parse(fs.readFileSync('npm-audit.json', 'utf8'));
            const vulnerabilities = npmAudit.metadata?.vulnerabilities || {};
            const total = Object.values(vulnerabilities).reduce((a, b) => a + b, 0);
            summary += `**NPM Audit**: ${total} vulnerabilities found\n`;
          } catch (e) {
            summary += '**NPM Audit**: âœ… No issues found\n';
          }
          
          // Check Python safety
          try {
            const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
            summary += `**Python Safety**: ${safetyReport.length} vulnerabilities found\n`;
          } catch (e) {
            summary += '**Python Safety**: âœ… No issues found\n';
          }
          
          // Check Bandit
          try {
            const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            const issues = banditReport.results?.length || 0;
            summary += `**Bandit**: ${issues} security issues found\n`;
          } catch (e) {
            summary += '**Bandit**: âœ… No issues found\n';
          }
          
          summary += '\nðŸ“‹ Detailed reports are available in the workflow artifacts.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check licenses
      run: |
        npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' || true
        
    - name: Generate license report
      run: |
        npx license-checker --json > license-report.json
        
    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report-${{ github.sha }}
        path: license-report.json
