[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "jaegis-ai-web-os"
version = "1.0.0"
description = "Universal AI-powered application foundry that transforms architectural documentation into complete applications"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "JAEGIS AI Team", email = "team@usemanusai.com"}
]
maintainers = [
    {name = "JAEGIS AI Team", email = "team@usemanusai.com"}
]
keywords = [
    "ai",
    "artificial-intelligence", 
    "architecture",
    "code-generation",
    "documentation",
    "automation",
    "nextjs",
    "react",
    "python",
    "django",
    "fastapi",
    "document-processing",
    "ai-powered",
    "application-generator",
    "enterprise",
    "production-ready",
    "cli-tool",
    "developer-tools",
    "openai",
    "anthropic",
    "gpt-4",
    "claude"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Text Processing :: General",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Environment :: Console",
    "Typing :: Typed"
]
requires-python = ">=3.8"
dependencies = [
    # Core framework
    "click>=8.0.0",
    "loguru>=0.7.0",
    "rich>=13.0.0",
    "python-dotenv>=1.0.0",
    
    # Document processing
    "python-docx>=0.8.11",
    "pypdf>=3.0.0",  # Replaced PyPDF2
    "openpyxl>=3.1.0",
    "python-pptx>=0.6.21",
    "pymupdf>=1.23.0",
    "beautifulsoup4>=4.12.0",
    "html2text>=2020.1.16",
    "markdown>=3.4.0",
    
    # AI/LLM integration
    "openai>=1.0.0",
    "anthropic>=0.3.0",
    "httpx>=0.24.0",
    "tenacity>=8.2.0",
    
    # Template engine
    "jinja2>=3.1.0",
    
    # Configuration management
    "pyyaml>=6.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "radon>=6.0.0"
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.24.0"
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0"
]
security = [
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pip-audit>=2.6.0"
]

[project.urls]
Homepage = "https://github.com/usemanusai/JAEGIS-AI-Web-OS"
Documentation = "https://github.com/usemanusai/JAEGIS-AI-Web-OS/tree/main/docs"
Repository = "https://github.com/usemanusai/JAEGIS-AI-Web-OS.git"
"Bug Tracker" = "https://github.com/usemanusai/JAEGIS-AI-Web-OS/issues"
Changelog = "https://github.com/usemanusai/JAEGIS-AI-Web-OS/blob/main/CHANGELOG.md"
Funding = "https://github.com/sponsors/usemanusai"

[project.scripts]
jaegis-ai-web-os = "mcp_server.__main__:main"
mcp-server = "mcp_server.__main__:main"  # Legacy alias

[tool.setuptools]
packages = ["mcp_server", "mcp_server.templates"]
include-package-data = true

[tool.setuptools.package-data]
mcp_server = ["templates/*.py", "*.yaml", "*.json"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "docx.*",
    "pptx.*",
    "openpyxl.*",
    "pymupdf.*",
    "bs4.*",
    "html2text.*",
    "anthropic.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ai: marks tests that require AI provider access"
]

[tool.coverage.run]
source = ["mcp_server"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.bandit]
exclude_dirs = ["tests", "test", ".venv", "venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for test files

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".eggs",
    "*.egg"
]
